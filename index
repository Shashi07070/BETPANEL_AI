<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Betting Admin Dashboard</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }

        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #e5e7eb;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #9ca3af;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }

        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }

        .no-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        /* Hide the default number input arrows */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Modal backdrop */
        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 99;
        }

        /* Modal content */
        .modal-content {
            animation: fadeIn 0.3s ease-out;
            z-index: 100;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }
    </style>
</head>

<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let db = null;
        let auth = null;
        let app = null;

        // Main application data state
        let players = [];
        let matches = [];
        let bets = [];
        let history = [];
        let currentUserId = '';
        let appDocRef = null;

        /**
         * Initializes the application by setting up Firebase.
         */
        const initializeFirebase = () => {
            try {
                app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);
            } catch (e) {
                console.error("Error initializing Firebase:", e);
                showError("Error connecting to Firebase. Please try again.");
            }
        };

        /**
         * Sets up the real-time Firestore listener and loads data.
         */
        const setupFirestoreListener = () => {
            if (!auth.currentUser || !db) {
                console.error("Authentication not ready or DB not initialized.");
                return;
            }

            currentUserId = auth.currentUser.uid;
            // The secure and persistent path for user-specific data
            appDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/betting_data/app_state`);

            onSnapshot(appDocRef, (docSnap) => {
                if (docSnap.exists()) {
                    const data = docSnap.data();
                    players = data.players || [];
                    matches = data.matches || [];
                    bets = data.bets || [];
                    history = data.history || [];
                    renderPlayers();
                    renderMatches();
                    renderHistory();
                    renderPlaceBetForm();
                } else {
                    // Document doesn't exist, create it with initial data
                    const initialData = {
                        players: [],
                        matches: [],
                        bets: [],
                        history: []
                    };
                    setDoc(appDocRef, initialData)
                        .then(() => console.log("Initial document created."))
                        .catch(e => console.error("Error creating document:", e));
                }
            }, (error) => {
                console.error("Error listening to Firestore:", error);
                showError("Could not connect to the database. Please check your network connection.");
            });
        };

        // Initialize Firebase on window load
        window.onload = () => {
            initializeFirebase();
            if (auth) {
                // Wait for the authentication state to be ready
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        console.log("User signed in:", user.uid);
                        // User is authenticated, proceed with Firestore operations
                        document.getElementById('loading-overlay').classList.add('hidden');
                        setupFirestoreListener();
                    } else {
                        console.log("User is signed out or anonymous. Attempting sign-in...");
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                await signInAnonymously(auth);
                            }
                        } catch (e) {
                            console.error("Authentication failed:", e);
                            showError("Authentication failed. Please try again.");
                        }
                    }
                });
            }
        };

        /**
         * Updates the Firestore document with the latest application state.
         */
        const updateFirestore = async () => {
            if (!db || !appDocRef) {
                console.error("Firestore DB or document reference is not initialized.");
                return;
            }
            const dataToSave = { players, matches, bets, history };
            try {
                await setDoc(appDocRef, dataToSave);
                console.log("Firestore updated successfully.");
            } catch (e) {
                console.error("Error updating Firestore:", e);
                showError("Failed to save data. Please check your network.");
            }
        };

        /**
         * Logs an action to the history array and updates Firestore.
         * @param {string} action - The description of the action.
         * @param {object} details - The detailed data for the log.
         */
        const logAction = (action, details) => {
            const newLog = {
                timestamp: new Date().toISOString(),
                action,
                details,
                adminId: currentUserId
            };
            history.unshift(newLog); // Add to the beginning of the array
            updateFirestore();
        };

        /**
         * Renders the player list in the players section.
         */
        const renderPlayers = () => {
            const playerListDiv = document.getElementById('player-list');
            playerListDiv.innerHTML = '';
            if (players.length === 0) {
                playerListDiv.innerHTML = `<p class="text-center text-gray-500 py-4">No players added yet.</p>`;
                return;
            }

            const table = document.createElement('table');
            table.className = 'w-full text-left table-auto';
            table.innerHTML = `
                <thead>
                    <tr class="bg-gray-200">
                        <th class="p-4 rounded-tl-lg">S.No</th>
                        <th class="p-4">Name</th>
                        <th class="p-4">Balance</th>
                        <th class="p-4 rounded-tr-lg">Actions</th>
                    </tr>
                </thead>
                <tbody id="player-table-body">
                </tbody>
            `;

            const tbody = table.querySelector('#player-table-body');
            players.forEach((player, index) => {
                const tr = document.createElement('tr');
                tr.className = 'border-b border-gray-200 hover:bg-gray-50 transition-colors';
                tr.innerHTML = `
                    <td class="p-4">${index + 1}</td>
                    <td class="p-4" data-dp="${player.dpNumber}">${player.name}</td>
                    <td class="p-4">â‚¹${player.balance.toFixed(2)}</td>
                    <td class="p-4">
                        <div class="flex space-x-2">
                            <button class="deposit-btn bg-green-500 hover:bg-green-600 text-white p-2 rounded-full w-8 h-8 flex items-center justify-center transition-transform transform hover:scale-110" data-id="${player.dpNumber}" title="Deposit">
                                <i class="fas fa-plus"></i>
                            </button>
                            <button class="withdrawal-btn bg-red-500 hover:bg-red-600 text-white p-2 rounded-full w-8 h-8 flex items-center justify-center transition-transform transform hover:scale-110" data-id="${player.dpNumber}" title="Withdrawal">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(tr);
            });
            playerListDiv.appendChild(table);

            document.querySelectorAll('.deposit-btn').forEach(button => {
                button.addEventListener('click', (e) => showAmountModal(e.currentTarget.dataset.id, 'deposit'));
            });

            document.querySelectorAll('.withdrawal-btn').forEach(button => {
                button.addEventListener('click', (e) => showAmountModal(e.currentTarget.dataset.id, 'withdrawal'));
            });
        };

        /**
         * Renders the matches list.
         */
        const renderMatches = () => {
            const matchesDiv = document.getElementById('matches-list');
            matchesDiv.innerHTML = '';
            if (matches.length === 0) {
                matchesDiv.innerHTML = `<p class="text-center text-gray-500 py-4">No matches added yet.</p>`;
                return;
            }

            const activeMatches = matches.filter(m => m.status === 'active');
            const settledMatches = matches.filter(m => m.status === 'settled');

            matchesDiv.innerHTML = `
                <div class="space-y-6">
                    <div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-4">Active Matches</h3>
                        ${activeMatches.length > 0 ? `
                            <div class="bg-white rounded-xl shadow-lg p-6 space-y-4">
                                ${activeMatches.map(m => `
                                    <div class="flex flex-col sm:flex-row items-center justify-between p-4 bg-gray-50 rounded-lg">
                                        <div class="text-sm font-medium text-gray-600">${m.teamA} vs ${m.teamB}</div>
                                        <div class="text-sm font-medium text-gray-600">Odds: ${m.teamA}:${m.odds[m.teamA]} - ${m.teamB}:${m.odds[m.teamB]}</div>
                                        <div class="flex items-center space-x-2 mt-2 sm:mt-0">
                                            <button onclick="showSettleModal('${m.id}')" class="bg-blue-500 hover:bg-blue-600 text-white text-sm px-4 py-2 rounded-full transition-colors">Settle Match</button>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        ` : `<p class="text-center text-gray-500">No active matches.</p>`}
                    </div>

                    <div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-4">Settled Matches</h3>
                        ${settledMatches.length > 0 ? `
                            <div class="bg-white rounded-xl shadow-lg p-6 space-y-4">
                                ${settledMatches.map(m => `
                                    <div class="flex flex-col sm:flex-row items-center justify-between p-4 bg-gray-50 rounded-lg">
                                        <div class="text-sm font-medium text-gray-600">${m.teamA} vs ${m.teamB}</div>
                                        <span class="text-sm font-bold text-green-600 mt-2 sm:mt-0">Winner: ${m.winner}</span>
                                    </div>
                                `).join('')}
                            </div>
                        ` : `<p class="text-center text-gray-500">No settled matches.</p>`}
                    </div>
                </div>
            `;
        };

        /**
         * Renders the history/record book.
         */
        const renderHistory = () => {
            const historyDiv = document.getElementById('history-table-body');
            historyDiv.innerHTML = '';
            if (history.length === 0) {
                historyDiv.innerHTML = `<p class="text-center text-gray-500 py-4 col-span-4">No records yet.</p>`;
                return;
            }

            history.forEach(log => {
                const tr = document.createElement('tr');
                tr.className = 'border-b border-gray-200 hover:bg-gray-50 transition-colors';
                const date = new Date(log.timestamp);
                const formattedDate = date.toLocaleDateString();
                const formattedTime = date.toLocaleTimeString();

                tr.innerHTML = `
                    <td class="p-4">${formattedDate} ${formattedTime}</td>
                    <td class="p-4 font-medium">${log.action}</td>
                    <td class="p-4 text-gray-600">${JSON.stringify(log.details)}</td>
                `;
                historyDiv.appendChild(tr);
            });
        };

        /**
         * Renders the player and match options in the place bet form.
         */
        const renderPlaceBetForm = () => {
            const playerSelect = document.getElementById('bet-player');
            const matchSelect = document.getElementById('bet-match');

            // Clear previous options
            playerSelect.innerHTML = '<option value="">Select Player</option>';
            matchSelect.innerHTML = '<option value="">Select Match</option>';

            players.forEach(player => {
                const option = document.createElement('option');
                option.value = player.dpNumber;
                option.textContent = player.name;
                playerSelect.appendChild(option);
            });

            matches.filter(m => m.status === 'active').forEach(match => {
                const option = document.createElement('option');
                option.value = match.id;
                option.textContent = `${match.teamA} vs ${match.teamB}`;
                option.dataset.teamA = match.teamA;
                option.dataset.teamB = match.teamB;
                matchSelect.appendChild(option);
            });
        };

        /**
         * Handles the login logic.
         * @param {Event} e - The form submission event.
         */
        document.getElementById('login-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            const credentials = {
                'masterkey': 'masterpass789',
                'rootadmin': 'rootaccess!@#',
                'sysop': 'operatorXYZ'
            };

            if (credentials[username] === password) {
                document.getElementById('login-screen').classList.add('hidden');
                document.getElementById('dashboard-container').classList.remove('hidden');
            } else {
                showError("Invalid username or password.");
            }
        });

        /**
         * Event listener for the navigation buttons.
         */
        document.querySelectorAll('.nav-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('bg-gray-700', 'text-white'));
                button.classList.add('bg-gray-700', 'text-white');

                document.querySelectorAll('.content-section').forEach(section => section.classList.add('hidden'));
                const target = button.dataset.target;
                document.getElementById(target).classList.remove('hidden');
            });
        });

        /**
         * Shows the modal for depositing or withdrawing an amount.
         * @param {string} dpNumber - The DP number of the player.
         * @param {string} type - 'deposit' or 'withdrawal'.
         */
        const showAmountModal = (dpNumber, type) => {
            const player = players.find(p => p.dpNumber === dpNumber);
            if (!player) return;

            const modal = document.getElementById('amount-modal');
            const title = document.getElementById('modal-title');
            const input = document.getElementById('amount-input');
            const submitBtn = document.getElementById('modal-submit-btn');

            title.textContent = `${type === 'deposit' ? 'Deposit' : 'Withdrawal'} for ${player.name}`;
            input.value = '';
            submitBtn.dataset.type = type;
            submitBtn.dataset.dp = dpNumber;

            modal.classList.remove('hidden');
        };

        /**
         * Closes the amount modal.
         */
        document.getElementById('amount-modal-close').addEventListener('click', () => {
            document.getElementById('amount-modal').classList.add('hidden');
        });

        /**
         * Handles the deposit/withdrawal submission from the modal.
         */
        document.getElementById('modal-submit-btn').addEventListener('click', () => {
            const amountInput = document.getElementById('amount-input');
            const amount = parseFloat(amountInput.value);
            const dpNumber = amountInput.dataset.dp;
            const type = amountInput.dataset.type;

            if (isNaN(amount) || amount <= 0) {
                showError("Please enter a valid amount.");
                return;
            }

            const playerIndex = players.findIndex(p => p.dpNumber === dpNumber);
            if (playerIndex === -1) {
                showError("Player not found.");
                return;
            }

            if (type === 'deposit') {
                players[playerIndex].balance += amount;
                logAction('Deposit', { player: players[playerIndex].name, amount });
            } else if (type === 'withdrawal') {
                if (players[playerIndex].balance < amount) {
                    showError("Insufficient balance for withdrawal.");
                    return;
                }
                players[playerIndex].balance -= amount;
                logAction('Withdrawal', { player: players[playerIndex].name, amount });
            }
            document.getElementById('amount-modal').classList.add('hidden');
        });

        /**
         * Adds a new player to the list.
         */
        document.getElementById('add-player-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const name = document.getElementById('new-player-name').value.trim();
            const balance = parseFloat(document.getElementById('initial-balance').value);

            if (!name || isNaN(balance)) {
                showError("Please enter a valid name and initial balance.");
                return;
            }

            const dpNumber = `DP-${(players.length + 1).toString().padStart(3, '0')}`;
            const newPlayer = {
                name,
                dpNumber,
                balance
            };
            players.push(newPlayer);
            logAction('Player Added', { name, dpNumber, balance });
            e.target.reset();
        });

        /**
         * Handles the "View All Balances" button click.
         */
        document.getElementById('view-balances-btn').addEventListener('click', () => {
            const balancesText = players.map(p => `${p.name}: â‚¹${p.balance.toFixed(2)}`).join('\n');
            const textarea = document.createElement('textarea');
            textarea.value = balancesText;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            showMessage("All player balances have been copied to your clipboard!");
        });

        /**
         * Adds a new match to the list.
         */
        document.getElementById('add-match-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const teamA = document.getElementById('teamA').value.trim();
            const teamB = document.getElementById('teamB').value.trim();
            const oddsA = parseFloat(document.getElementById('oddsA').value);
            const oddsB = parseFloat(document.getElementById('oddsB').value);

            if (!teamA || !teamB || isNaN(oddsA) || isNaN(oddsB)) {
                showError("Please enter names and valid odds for both teams.");
                return;
            }

            const newMatch = {
                id: `match-${Date.now()}`,
                teamA,
                teamB,
                odds: {
                    [teamA]: oddsA,
                    [teamB]: oddsB
                },
                status: 'active'
            };
            matches.push(newMatch);
            logAction('Match Created', { teamA, teamB, odds: newMatch.odds, id: newMatch.id });
            e.target.reset();
        });

        /**
         * Handles the place bet form submission.
         */
        document.getElementById('place-bet-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const playerDp = document.getElementById('bet-player').value;
            const matchId = document.getElementById('bet-match').value;
            const amount = parseFloat(document.getElementById('bet-amount').value);
            const team = document.getElementById('bet-team').value;

            if (!playerDp || !matchId || isNaN(amount) || amount <= 0 || !team) {
                showError("Please fill out all fields correctly.");
                return;
            }

            const player = players.find(p => p.dpNumber === playerDp);
            if (!player) {
                showError("Player not found.");
                return;
            }
            if (player.balance < amount) {
                showError("Insufficient balance to place this bet.");
                return;
            }

            const bet = {
                id: `bet-${Date.now()}`,
                playerId: playerDp,
                matchId: matchId,
                amount,
                team,
                timestamp: new Date().toISOString()
            };

            // Subtract bet amount from player's balance immediately
            player.balance -= amount;
            bets.push(bet);
            logAction('Bet Placed', { player: player.name, amount, matchId, team });
            updateFirestore();
            e.target.reset();
        });
        
        // Listen for changes in the match selection to update the team options
        document.getElementById('bet-match').addEventListener('change', (e) => {
            const matchId = e.target.value;
            const betTeamSelect = document.getElementById('bet-team');
            betTeamSelect.innerHTML = '';
            
            const selectedMatch = matches.find(m => m.id === matchId);
            if (selectedMatch) {
                const teamAOption = document.createElement('option');
                teamAOption.value = selectedMatch.teamA;
                teamAOption.textContent = selectedMatch.teamA;
                betTeamSelect.appendChild(teamAOption);
                
                const teamBOption = document.createElement('option');
                teamBOption.value = selectedMatch.teamB;
                teamBOption.textContent = selectedMatch.teamB;
                betTeamSelect.appendChild(teamBOption);
            }
        });

        /**
         * Shows the modal to settle a match.
         * @param {string} matchId - The ID of the match to settle.
         */
        window.showSettleModal = (matchId) => {
            const match = matches.find(m => m.id === matchId);
            if (!match) return;

            const modal = document.getElementById('settle-modal');
            const title = document.getElementById('settle-modal-title');
            const teamRadioA = document.getElementById('winner-teamA');
            const teamRadioB = document.getElementById('winner-teamB');
            const submitBtn = document.getElementById('settle-modal-submit-btn');

            title.textContent = `Settle Match: ${match.teamA} vs ${match.teamB}`;
            teamRadioA.value = match.teamA;
            teamRadioA.nextElementSibling.textContent = `${match.teamA} (Odds: ${match.odds[match.teamA]})`;
            teamRadioB.value = match.teamB;
            teamRadioB.nextElementSibling.textContent = `${match.teamB} (Odds: ${match.odds[match.teamB]})`;
            submitBtn.dataset.matchId = matchId;

            modal.classList.remove('hidden');
        };

        /**
         * Handles the match settlement submission.
         */
        document.getElementById('settle-modal-submit-btn').addEventListener('click', () => {
            const matchId = document.getElementById('settle-modal-submit-btn').dataset.matchId;
            const winnerInput = document.querySelector('input[name="winner"]:checked');

            if (!winnerInput) {
                showError("Please select a winning team.");
                return;
            }

            const winningTeam = winnerInput.value;
            const matchIndex = matches.findIndex(m => m.id === matchId);
            if (matchIndex === -1) return;

            const winningOdds = matches[matchIndex].odds[winningTeam];
            
            matches[matchIndex].status = 'settled';
            matches[matchIndex].winner = winningTeam;

            // Process bets for this match
            const betsToSettle = bets.filter(b => b.matchId === matchId);
            betsToSettle.forEach(bet => {
                const player = players.find(p => p.dpNumber === bet.playerId);
                if (player) {
                    if (bet.team === winningTeam) {
                        const payout = bet.amount * (1 + winningOdds);
                        player.balance += payout; 
                        logAction('Bet Won', { player: player.name, amount: bet.amount, payout: payout.toFixed(2), match: `${matches[matchIndex].teamA} vs ${matches[matchIndex].teamB}`, winningTeam });
                    } else {
                        // Loss is already accounted for when the bet was placed
                        logAction('Bet Lost', { player: player.name, amount: bet.amount, match: `${matches[matchIndex].teamA} vs ${matches[matchIndex].teamB}`, losingTeam: bet.team });
                    }
                }
            });

            // Remove settled bets from the list
            bets = bets.filter(b => b.matchId !== matchId);

            logAction('Match Settled', { match: `${matches[matchIndex].teamA} vs ${matches[matchIndex].teamB}`, winner: winningTeam });
            updateFirestore();
            document.getElementById('settle-modal').classList.add('hidden');
        });

        /**
         * Closes the settle modal.
         */
        document.getElementById('settle-modal-close').addEventListener('click', () => {
            document.getElementById('settle-modal').classList.add('hidden');
        });

        /**
         * Shows a temporary message at the top of the screen.
         * @param {string} message - The message to display.
         */
        const showMessage = (message) => {
            const messageBox = document.getElementById('message-box');
            messageBox.textContent = message;
            messageBox.classList.remove('hidden');
            messageBox.classList.add('bg-green-500');
            setTimeout(() => {
                messageBox.classList.add('hidden');
                messageBox.classList.remove('bg-green-500');
            }, 3000);
        };

        /**
         * Shows a temporary error message at the top of the screen.
         * @param {string} message - The error message to display.
         */
        const showError = (message) => {
            const messageBox = document.getElementById('message-box');
            messageBox.textContent = message;
            messageBox.classList.remove('hidden');
            messageBox.classList.add('bg-red-500');
            setTimeout(() => {
                messageBox.classList.add('hidden');
                messageBox.classList.remove('bg-red-500');
            }, 5000);
        };
    </script>

    <!-- Loading Screen -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-200 bg-opacity-75 flex items-center justify-center z-[101]">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-gray-900"></div>
    </div>

    <!-- Main Content -->
    <div id="app-container" class="min-h-screen w-full flex flex-col items-center justify-center p-4">
        <!-- Message Box -->
        <div id="message-box" class="fixed top-4 left-1/2 -translate-x-1/2 px-6 py-3 rounded-lg text-white font-semibold shadow-lg hidden transition-opacity duration-300 z-50"></div>

        <!-- Login Screen -->
        <div id="login-screen" class="w-full max-w-sm">
            <div class="bg-white rounded-xl shadow-lg p-8">
                <h2 class="text-3xl font-bold text-center text-gray-800 mb-6">Admin Login</h2>
                <form id="login-form" class="space-y-4">
                    <div>
                        <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                        <input type="text" id="username" name="username" required
                            class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                        <input type="password" id="password" name="password" required
                            class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <button type="submit"
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                            Log In
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Dashboard Container -->
        <div id="dashboard-container" class="hidden w-full max-w-6xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden min-h-[80vh] flex flex-col">
            <!-- Navigation Sidebar -->
            <div class="bg-gray-800 text-white p-4 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
                <div class="text-2xl font-bold text-blue-400">Betting App</div>
                <nav class="flex flex-wrap gap-2 sm:gap-4">
                    <button class="nav-btn bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors hover:bg-gray-600" data-target="players-section">
                        <i class="fas fa-users mr-2"></i>Players
                    </button>
                    <button class="nav-btn px-4 py-2 rounded-lg font-medium transition-colors hover:bg-gray-600" data-target="matches-section">
                        <i class="fas fa-gamepad mr-2"></i>Matches
                    </button>
                    <button class="nav-btn px-4 py-2 rounded-lg font-medium transition-colors hover:bg-gray-600" data-target="place-bet-section">
                        <i class="fas fa-hand-holding-usd mr-2"></i>Place Bet
                    </button>
                    <button class="nav-btn px-4 py-2 rounded-lg font-medium transition-colors hover:bg-gray-600" data-target="history-section">
                        <i class="fas fa-book-open mr-2"></i>Record Book
                    </button>
                </nav>
            </div>

            <!-- Dashboard Content -->
            <div class="p-6 flex-1 overflow-y-auto no-scrollbar">

                <!-- Players Section -->
                <div id="players-section" class="content-section">
                    <h2 class="text-3xl font-bold text-gray-800 mb-6">Players</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <!-- Add Player Form -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <h3 class="text-xl font-semibold text-gray-700 mb-4">Add New Player</h3>
                            <form id="add-player-form" class="space-y-4">
                                <div>
                                    <label for="new-player-name" class="block text-sm font-medium text-gray-700">Name</label>
                                    <input type="text" id="new-player-name" required
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label for="initial-balance" class="block text-sm font-medium text-gray-700">Initial Balance (â‚¹)</label>
                                    <input type="number" id="initial-balance" required min="0" step="1"
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <button type="submit"
                                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors">
                                        Add Player
                                    </button>
                                </div>
                            </form>
                        </div>
                        <!-- Player List -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-xl font-semibold text-gray-700">Current Players</h3>
                                <button id="view-balances-btn" class="bg-indigo-500 hover:bg-indigo-600 text-white text-sm px-4 py-2 rounded-full transition-colors">
                                    <i class="fas fa-copy mr-2"></i>Copy Balances
                                </button>
                            </div>
                            <div id="player-list" class="overflow-x-auto">
                                <!-- Player data will be rendered here by JS -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Matches Section -->
                <div id="matches-section" class="content-section hidden">
                    <h2 class="text-3xl font-bold text-gray-800 mb-6">Matches</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <!-- Add Match Form -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <h3 class="text-xl font-semibold text-gray-700 mb-4">Host New Match</h3>
                            <form id="add-match-form" class="space-y-4">
                                <div>
                                    <label for="teamA" class="block text-sm font-medium text-gray-700">Team A</label>
                                    <input type="text" id="teamA" required
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                    <label for="oddsA" class="block text-sm font-medium text-gray-700 mt-2">Odds for Team A</label>
                                    <input type="number" id="oddsA" required min="0" step="0.01" value="0.98"
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label for="teamB" class="block text-sm font-medium text-gray-700">Team B</label>
                                    <input type="text" id="teamB" required
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                    <label for="oddsB" class="block text-sm font-medium text-gray-700 mt-2">Odds for Team B</label>
                                    <input type="number" id="oddsB" required min="0" step="0.01" value="0.98"
                                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <button type="submit"
                                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors">
                                        Create Match
                                    </button>
                                </div>
                            </form>
                        </div>
                        <!-- Matches List -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <h3 class="text-xl font-semibold text-gray-700 mb-4">Matches List</h3>
                            <div id="matches-list">
                                <!-- Match data will be rendered here by JS -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Place Bet Section -->
                <div id="place-bet-section" class="content-section hidden">
                    <h2 class="text-3xl font-bold text-gray-800 mb-6">Place Bet</h2>
                    <div class="bg-white rounded-xl shadow-lg p-6 max-w-md mx-auto">
                        <h3 class="text-xl font-semibold text-gray-700 mb-4">Place a New Bet</h3>
                        <form id="place-bet-form" class="space-y-4">
                            <div>
                                <label for="bet-player" class="block text-sm font-medium text-gray-700">Select Player</label>
                                <select id="bet-player" required
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">Select Player</option>
                                </select>
                            </div>
                            <div>
                                <label for="bet-match" class="block text-sm font-medium text-gray-700">Select Match</label>
                                <select id="bet-match" required
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">Select Match</option>
                                </select>
                            </div>
                            <div>
                                <label for="bet-amount" class="block text-sm font-medium text-gray-700">Bet Amount (â‚¹)</label>
                                <input type="number" id="bet-amount" required min="1" step="1"
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Select Team</label>
                                <select id="bet-team" required
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">Select a team after selecting a match</option>
                                </select>
                            </div>
                            <div>
                                <button type="submit"
                                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 transition-colors">
                                    Place Bet
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Record Book Section -->
                <div id="history-section" class="content-section hidden">
                    <h2 class="text-3xl font-bold text-gray-800 mb-6">Record Book</h2>
                    <div class="bg-white rounded-xl shadow-lg p-6">
                        <div class="overflow-x-auto">
                            <table class="min-w-full text-left table-auto">
                                <thead class="bg-gray-200">
                                    <tr>
                                        <th class="p-4 rounded-tl-lg">Timestamp</th>
                                        <th class="p-4">Action</th>
                                        <th class="p-4 rounded-tr-lg">Details</th>
                                    </tr>
                                </thead>
                                <tbody id="history-table-body">
                                    <!-- History data will be rendered here by JS -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <!-- Modals -->
        <div id="amount-modal" class="hidden fixed inset-0 flex items-center justify-center modal-backdrop">
            <div class="bg-white rounded-xl shadow-xl p-6 w-full max-w-sm modal-content">
                <div class="flex justify-between items-center pb-3">
                    <h3 id="modal-title" class="text-2xl font-semibold text-gray-800"></h3>
                    <button id="amount-modal-close" class="text-gray-400 hover:text-gray-600">&times;</button>
                </div>
                <div class="mt-4">
                    <label for="amount-input" class="block text-sm font-medium text-gray-700">Amount (â‚¹)</label>
                    <input type="number" id="amount-input" min="1" step="1"
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div class="mt-6 flex justify-end">
                    <button id="modal-submit-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors">Submit</button>
                </div>
            </div>
        </div>

        <div id="settle-modal" class="hidden fixed inset-0 flex items-center justify-center modal-backdrop">
            <div class="bg-white rounded-xl shadow-xl p-6 w-full max-w-md modal-content">
                <div class="flex justify-between items-center pb-3">
                    <h3 id="settle-modal-title" class="text-2xl font-semibold text-gray-800">Settle Match</h3>
                    <button id="settle-modal-close" class="text-gray-400 hover:text-gray-600">&times;</button>
                </div>
                <form class="mt-4 space-y-4">
                    <p class="text-gray-600">Select the winning team:</p>
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center">
                            <input type="radio" id="winner-teamA" name="winner" value="" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                            <label for="winner-teamA" class="ml-2 block text-sm font-medium text-gray-700"></label>
                        </div>
                        <div class="flex items-center">
                            <input type="radio" id="winner-teamB" name="winner" value="" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                            <label for="winner-teamB" class="ml-2 block text-sm font-medium text-gray-700"></label>
                        </div>
                    </div>
                </form>
                <div class="mt-6 flex justify-end">
                    <button id="settle-modal-submit-btn" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-medium transition-colors">Settle Match</button>
                </div>
            </div>
        </div>

    </div>

</body>

</html>
